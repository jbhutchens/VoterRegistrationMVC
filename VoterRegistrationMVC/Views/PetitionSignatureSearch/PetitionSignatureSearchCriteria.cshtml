@model VoterRegistrationMVC.Models.IPetitionSignatureSearchCriteriaView


 
<div id="SearchBox" class="editor">
    @using (Html.BeginForm(new { id = "searchCriteria" }))
    {
        // Here is were the magic is, if you use the @Html.*For(m=>)
        // Methods, they will create names that match the model
        // and you can back back to the same model on Get/Post

        /*@Html.DropDownList("PetitionID", new List<SelectListItem>(), new { @class = "form-control" })
        @Html.DropDownList("PetitionID", null, "", new { @class = "form-control", required = "required" })*/

        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(m => m.PetitionSignatureSearchCriteriaModel.Petitions, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownListFor(m => m.PetitionSignatureSearchCriteriaModel.PetitionID, Model.PetitionSignatureSearchCriteriaModel.Petitions, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(m => m.PetitionSignatureSearchCriteriaModel.PetitionID, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="clearfix"></div>
                <div class="form-group">
                    @Html.Label("First Name:", null, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.TextBoxFor(m => m.PetitionSignatureSearchCriteriaModel.FirstName, null, new { @class = "form-control" })
                    </div>
                </div>
                <div class="clearfix"></div>
                <div class="form-group">
                    @Html.Label("Last Name:", null, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.TextBoxFor(m => m.PetitionSignatureSearchCriteriaModel.LastName, null, new { @class = "form-control" })
                    </div>
                </div>
                <div class="clearfix"></div>
                <div class="form-group"> 
                    <div class="col-md-10">
                        <input type="submit" value="Search" onclick="DoSubmit()" />
                    </div>
                </div>
                <div class="clearfix"></div>
            </div>

            <div class="col-md-6">
                <div class="form-group" style="white-space:nowrap">
                    @Html.LabelFor(m => m.PetitionSignatureSearchCriteriaModel.PetitionDetailValues, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10" style="white-space:nowrap">
                        @Html.DropDownListFor(m => m.PetitionSignatureSearchCriteriaModel.PetitionDetailID, Model.PetitionSignatureSearchCriteriaModel.PetitionDetailValues, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(m => m.PetitionSignatureSearchCriteriaModel.PetitionDetailID, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="clearfix"></div>
                <div class="form-group" style="white-space:nowrap">
                    @Html.Label("House Number:", null, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.TextBoxFor(m => Model.PetitionSignatureSearchCriteriaModel.HouseNumber, null, new { @class = "form-control" })
                    </div>
                </div>
            </div>
        </div>
  

        @Html.HiddenFor(x => x.PetitionSignatureSearchCriteriaModel.Page, new { id = "page" })

    }
</div>


<script>
    function DoSubmit() {
        //If we reclick the search button it makes sense to send us back to page 1
        document.getElementById("page").value = "1";

        document.getElementById("frmCriteria").submit();
    }
</script>